#!/usr/bin/env python
import argparse
import os
import hashlib
import ROOT
ROOT.gROOT.SetBatch()
ROOT.gErrorIgnoreLevel = ROOT.kError

# This is list of variables (nVar have to be first)
varsToSave = [
    'fixedGridRhoFastjetAll',
    'genWeight',
    'luminosityBlock',
    'run',
    'nElectron',
    'nFatJet',
    'nGenJet',
    'nGenJetAK8',
    'nGenPart',
    'nJet',
    'nMuon',
    'nSubJet',
    'nTau',
    'Electron_charge',
    'Electron_cleanmask',
    'Electron_convVeto',
    'Electron_cutBased',
    'Electron_deltaEtaSC',
    'Electron_dr03EcalRecHitSumEt',
    'Electron_dr03HcalDepth1TowerSumEt',
    'Electron_dr03TkSumPt',
    'Electron_dr03TkSumPtHEEP',
    'Electron_dxy',
    'Electron_dxyErr',
    'Electron_dz',
    'Electron_dzErr',
    'Electron_eCorr',
    'Electron_eInvMinusPInv',
    'Electron_energyErr',
    'Electron_eta',
    'Electron_genPartFlav',
    'Electron_genPartIdx',
    'Electron_genPartIdxG',
    'Electron_hoe',
    'Electron_ip3d',
    'Electron_isPFcand',
    'Electron_jetIdx',
    'Electron_jetIdxG',
    'Electron_jetNDauCharged',
    'Electron_jetPtRelv2',
    'Electron_jetRelIso',
    'Electron_lostHits',
    'Electron_mass',
    'Electron_mvaFall17V1Iso',
    'Electron_mvaFall17V1noIso',
    'Electron_mvaFall17V2Iso',
    'Electron_mvaFall17V2noIso',
    'Electron_mvaSpring16GP',
    'Electron_mvaSpring16HZZ',
    'Electron_mvaTTH',
    'Electron_pdgId',
    'Electron_phi',
    'Electron_photonIdx',
    'Electron_photonIdxG',
    'Electron_pt',
    'Electron_r9',
    'Electron_scEtOverPt',
    'Electron_seedGain',
    'Electron_sieie',
    'Electron_sip3d',
    'Electron_tightCharge',
    'Electron_vidNestedWPBitmap',
    'Electron_vidNestedWPBitmapHEEP',
    'Electron_vidNestedWPBitmapSpring15',
    'Electron_vidNestedWPBitmapSum16',
    'FatJet_Proba',
    'FatJet_area',
    'FatJet_btagCMVA',
    'FatJet_btagCSVV2',
    'FatJet_btagDDBvL',
    'FatJet_btagDDBvLV2',
    'FatJet_btagDDCvB',
    'FatJet_btagDDCvBV2',
    'FatJet_btagDDCvL',
    'FatJet_btagDDCvLV2',
    'FatJet_btagDeepB',
    'FatJet_btagDeepL',
    'FatJet_btagHbb',
    'FatJet_electronIdx3SJ',
    'FatJet_eta',
    'FatJet_genJetAK8Idx',
    'FatJet_genJetAK8IdxG',
    'FatJet_hadronFlavour',
    'FatJet_jetId',
    'FatJet_lsf3',
    'FatJet_mass',
    'FatJet_msoftdrop',
    'FatJet_muonIdx3SJ',
    'FatJet_n2b1',
    'FatJet_n3b1',
    'FatJet_nBHadrons',
    'FatJet_nCHadrons',
    'FatJet_phi',
    'FatJet_pt',
    'FatJet_rawFactor',
    'FatJet_subJetIdx1',
    'FatJet_subJetIdx1G',
    'FatJet_subJetIdx2',
    'FatJet_subJetIdx2G',
    'FatJet_subJetIdxG',
    'FatJet_tau1',
    'FatJet_tau2',
    'FatJet_tau3',
    'FatJet_tau4',
    'Flag_BadPFMuonFilter',
    'Flag_EcalDeadCellTriggerPrimitiveFilter',
    'Flag_HBHENoiseFilter',
    'Flag_HBHENoiseIsoFilter',
    'Flag_ecalBadCalibFilterV2',
    'Flag_eeBadScFilter',
    'Flag_globalSuperTightHalo2016Filter',
    'Flag_goodVertices',
    'GenJetAK8_eta',
    'GenJetAK8_hadronFlavour',
    'GenJetAK8_mass',
    'GenJetAK8_partonFlavour',
    'GenJetAK8_phi',
    'GenJetAK8_pt',
    'GenJet_eta',
    'GenJet_hadronFlavour',
    'GenJet_mass',
    'GenJet_partonFlavour',
    'GenJet_phi',
    'GenJet_pt',
    'GenPart_childrenIdxG',
    'GenPart_distinctChildrenIdxG',
    'GenPart_distinctParentIdxG',
    'GenPart_eta',
    'GenPart_genPartIdxMother',
    'GenPart_genPartIdxMotherG',
    'GenPart_mass',
    'GenPart_pdgId',
    'GenPart_phi',
    'GenPart_pt',
    'GenPart_status',
    'GenPart_statusFlags',
    'HLT_AK8DiPFJet280_200_TrimMass30_BTagCSV_p20',
    'HLT_AK8PFHT700_TrimR0p1PT0p03Mass50',
    'HLT_AK8PFHT800_TrimMass50',
    'HLT_AK8PFJet330_PFAK8BTagCSV_p17',
    'HLT_AK8PFJet330_TrimMass30_PFAK8BoostedDoubleB_np4',
    'HLT_AK8PFJet360_TrimMass30',
    'HLT_AK8PFJet400_TrimMass30',
    'HLT_AK8PFJet420_TrimMass30',
    'HLT_AK8PFJet500',
    'HLT_Mu50',
    'HLT_PFHT1050',
    'HLT_PFHT650_WideJetMJJ900DEtaJJ1p5',
    'HLT_PFHT650_WideJetMJJ950DEtaJJ1p5',
    'HLT_PFHT800',
    'HLT_PFHT900',
    'HLT_PFJet450',
    'HLT_PFJet500',
    'Jet_Proba',
    'Jet_area',
    'Jet_bRegCorr',
    'Jet_bRegRes',
    'Jet_btagCMVA',
    'Jet_btagCSVV2',
    'Jet_btagDeepB',
    'Jet_btagDeepC',
    'Jet_btagDeepCvB',
    'Jet_btagDeepCvL',
    'Jet_btagDeepFlavB',
    'Jet_btagDeepFlavC',
    'Jet_btagDeepFlavCvB',
    'Jet_btagDeepFlavCvL',
    'Jet_btagDeepFlavQG',
    'Jet_btagDeepL',
    'Jet_cRegCorr',
    'Jet_cRegRes',
    'Jet_chEmEF',
    'Jet_chFPV0EF',
    'Jet_chFPV1EF',
    'Jet_chFPV2EF',
    'Jet_chFPV3EF',
    'Jet_chHEF',
    'Jet_cleanmask',
    'Jet_electronIdx1',
    'Jet_electronIdx1G',
    'Jet_electronIdx2',
    'Jet_electronIdx2G',
    'Jet_electronIdxG',
    'Jet_eta',
    'Jet_genJetIdx',
    'Jet_genJetIdxG',
    'Jet_hadronFlavour',
    'Jet_hfadjacentEtaStripsSize',
    'Jet_hfcentralEtaStripSize',
    'Jet_hfsigmaEtaEta',
    'Jet_hfsigmaPhiPhi',
    'Jet_jetId',
    'Jet_mass',
    'Jet_muEF',
    'Jet_muonIdx1',
    'Jet_muonIdx1G',
    'Jet_muonIdx2',
    'Jet_muonIdx2G',
    'Jet_muonIdxG',
    'Jet_muonSubtrFactor',
    'Jet_nBHadrons',
    'Jet_nCHadrons',
    'Jet_nConstituents',
    'Jet_nElectrons',
    'Jet_nMuons',
    'Jet_neEmEF',
    'Jet_neHEF',
    'Jet_pFCandsIdxG',
    'Jet_partonFlavour',
    'Jet_phi',
    'Jet_pt',
    'Jet_puId',
    'Jet_puIdDisc',
    'Jet_qgl',
    'Jet_rawFactor',
    'L1PreFiringWeight_Dn',
    'L1PreFiringWeight_Nom',
    'L1PreFiringWeight_Up',
    'LHEPdfWeight',
    'LHEScaleWeight',
    'MET_MetUnclustEnUpDeltaX',
    'MET_MetUnclustEnUpDeltaY',
    'MET_phi',
    'MET_pt',
    'Muon_charge',
    'Muon_cleanmask',
    'Muon_dxy',
    'Muon_dxyErr',
    'Muon_dxybs',
    'Muon_dz',
    'Muon_dzErr',
    'Muon_eta',
    'Muon_fsrPhotonIdx',
    'Muon_fsrPhotonIdxG',
    'Muon_genPartFlav',
    'Muon_genPartIdx',
    'Muon_genPartIdxG',
    'Muon_highPtId',
    'Muon_highPurity',
    'Muon_inTimeMuon',
    'Muon_ip3d',
    'Muon_isGlobal',
    'Muon_isPFcand',
    'Muon_isTracker',
    'Muon_jetIdx',
    'Muon_jetIdxG',
    'Muon_jetNDauCharged',
    'Muon_jetPtRelv2',
    'Muon_jetRelIso',
    'Muon_looseId',
    'Muon_mass',
    'Muon_mediumId',
    'Muon_mediumPromptId',
    'Muon_miniIsoId',
    'Muon_multiIsoId',
    'Muon_mvaId',
    'Muon_mvaLowPt',
    'Muon_mvaLowPtId',
    'Muon_mvaTTH',
    'Muon_nStations',
    'Muon_nTrackerLayers',
    'Muon_pdgId',
    'Muon_pfIsoId',
    'Muon_pfRelIso04_all',
    'Muon_phi',
    'Muon_pt',
    'Muon_ptErr',
    'Muon_segmentComp',
    'Muon_sip3d',
    'Muon_softId',
    'Muon_softMva',
    'Muon_softMvaId',
    'Muon_tightCharge',
    'Muon_tightId',
    'Muon_tkIsoId',
    'Muon_tkRelIso',
    'Muon_triggerIdLoose',
    'Muon_tunepRelPt',
    'PSWeight',
    'Pileup_nPU',
    'SubJet_Proba',
    'SubJet_btagCMVA',
    'SubJet_btagCSVV2',
    'SubJet_btagDeepB',
    'SubJet_btagDeepC',
    'SubJet_btagDeepL',
    'SubJet_eta',
    'SubJet_hadronFlavour',
    'SubJet_mass',
    'SubJet_n2b1',
    'SubJet_n3b1',
    'SubJet_nBHadrons',
    'SubJet_nCHadrons',
    'SubJet_phi',
    'SubJet_pt',
    'SubJet_rawFactor',
    'SubJet_subGenJetAK8Idx',
    'SubJet_tau1',
    'SubJet_tau2',
    'SubJet_tau3',
    'SubJet_tau4',
    'Tau_charge',
    'Tau_chargedIso',
    'Tau_cleanmask',
    'Tau_decayMode',
    'Tau_dxy',
    'Tau_dz',
    'Tau_eta',
    'Tau_genPartFlav',
    'Tau_genPartIdx',
    'Tau_genPartIdxG',
    'Tau_idAntiEle',
    'Tau_idAntiEle2018',
    'Tau_idAntiEleDeadECal',
    'Tau_idAntiMu',
    'Tau_idDecayMode',
    'Tau_idDecayModeNewDMs',
    'Tau_idDeepTau2017v2p1VSe',
    'Tau_idDeepTau2017v2p1VSjet',
    'Tau_idDeepTau2017v2p1VSmu',
    'Tau_idMVAnewDM2017v2',
    'Tau_idMVAoldDM',
    'Tau_idMVAoldDM2017v1',
    'Tau_idMVAoldDM2017v2',
    'Tau_idMVAoldDMdR032017v2',
    'Tau_jetIdx',
    'Tau_jetIdxG',
    'Tau_leadTkDeltaEta',
    'Tau_leadTkDeltaPhi',
    'Tau_leadTkPtOverTauPt',
    'Tau_mass',
    'Tau_neutralIso',
    'Tau_phi',
    'Tau_photonsOutsideSignalCone',
    'Tau_pt',
    'Tau_puCorr',
    'Tau_rawAntiEle',
    'Tau_rawAntiEle2018',
    'Tau_rawAntiEleCat',
    'Tau_rawAntiEleCat2018',
    'Tau_rawDeepTau2017v2p1VSe',
    'Tau_rawDeepTau2017v2p1VSjet',
    'Tau_rawDeepTau2017v2p1VSmu',
    'Tau_rawIso',
    'Tau_rawIsodR03',
    'Tau_rawMVAnewDM2017v2',
    'Tau_rawMVAoldDM',
    'Tau_rawMVAoldDM2017v1',
    'Tau_rawMVAoldDM2017v2',
    'Tau_rawMVAoldDMdR032017v2'
]


def doFiles(filelist, out):
    # Actual skimming
    if os.path.isfile(out):
        return 0
    else:
        fChain = ROOT.TChain("Events")
        _compressions = {}
        for f in filelist:
            fChain.Add(f)
            _rf = ROOT.TFile.Open(f)
            _compressions[f] = _rf.GetCompressionSettings()
            _rf.Close()

        # Compression
        ALGOS = {1: "ZLIB", 2: "LZMA", 4: "LZ4", 5: "ZSTD"}
        if len(set(_compressions.values())) > 1:
            print("Not all files have compression:")
            for k, v in _compressions:
                print(f"    {v} : {k}")
            compression_algo, compression_level = 4, 4
            print(f"Will use default compression algo: {ALGOS[compression_algo]}:{compression_level}")
        else:
            compression_algo, _, compression_level  = (int(s) for s in str(set(_compressions.values()).pop()))
            print(f"Will use input compression algo: {ALGOS[compression_algo]}:{compression_level}")

        # Branches
        available = sorted([branch.GetName() for branch in fChain.GetListOfBranches()])
        # Put counting branches first
        available = [a for a in available if a.startswith("n")] + [a for a in available if not a.startswith("n")]

        events_df = ROOT.RDataFrame(fChain)
        # Pre-selection
        # sel = "Sum(FatJet_pt>350)>0"

        # Doesn't work without a dummy sel for some reason
        sel = "2+2 == 4"
        events_fil0 = events_df.Filter(sel)
        events_out = events_fil0

        outVars = ROOT.std.vector('string')()
        for v in available:
            if v in varsToSave:
                outVars.push_back(v)

        # events_out.Snapshot("Events", out, outVars)

        sopt = ROOT.RDF.RSnapshotOptions("RECREATE", compression_algo, compression_level, 0, 99, False) #lazy is last option
        events_out.Snapshot("Events", out, outVars, sopt)

        fChain.Reset()
        del fChain
        del events_df
        del events_out
        del outVars
    # print(outs)  # prnt output names, to be collected by parsl
    return 0


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run Skim and add trees for a sample',
                                     usage="./SkimTrees.py sample_name")
    parser.add_argument('out', type=str)
    parser.add_argument('filenames',
                        metavar='FILES',
                        type=str,
                        nargs='+',
                        help='an integer for the accumulator')
    args = parser.parse_args()

    import time
    start = time.time()
    doFiles(args.filenames, args.out)
    end = time.time()
    print("TIME:", time.strftime("%H:%M:%S", time.gmtime(end-start)))
